name: Build and Test CI Workflow
on:
  push:
    branches:
    - dev
    paths:
    - 'infra/**.tf'
    - 'infra/**.tfvars'
    - 'infra/.terraform-version'
    - 'flask-app/app/**.py'
    - 'flask-app/Dockerfile'
    - 'flask-app/requirements.txt'
    - '**.yml'

jobs:

  aws-ecr-setup:
    timeout-minutes: 10
    name: Create ECR repository
    runs-on: ubuntu-latest
    env:
      working-directory: ./infra

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.push.head.sha }}
      
      - name: Set environment variable AWS_DEFAULT_REGION
        env:
          AR: ${{ secrets.AWS_DEFAULT_REGION }}
        run: echo "AWS_DEFAULT_REGION=${AR}" >> $GITHUB_ENV
      
      - name: Set environment variable AWS_ACCESS_KEY_ID
        env:
          AAKI: ${{ secrets.AWS_ACCESS_KEY_ID }}
        run: echo "AWS_ACCESS_KEY_ID=${AAKI}" >> $GITHUB_ENV
      
      - name: Set environment variable AWS_SECRET_ACCESS_KEY
        env:
          ASAK: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: echo "AWS_SECRET_ACCESS_KEY=${ASAK}" >> $GITHUB_ENV
      
      - name: Terraform install and init
        shell: bash
        working-directory: ${{ env.working-directory }}
        run: |
          export TF_VERSION=$(head -1 .terraform-version)
          curl -qL -o terraform.zip https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
          unzip terraform.zip
          chmod +x ./terraform
          ./terraform version
          ./terraform init

      - name: Terraform apply
        id: terraform-apply
        shell: bash
        working-directory: ${{ env.working-directory }}
        run: ./terraform apply -auto-approve
      
      - name: Workflow end
        run: echo "Finished with terraform actions"

  build-image:
    needs: aws-ecr-setup
    name: Build image
    runs-on: ubuntu-latest
    env:
      working-directory: ./flask-app

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.push.head.sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        working-directory: ${{ env.working-directory }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: flask-app
          IMAGE_TAG: v1.0.${{ github.run_number }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
